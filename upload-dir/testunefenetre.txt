/**********************************************************/
/*� 2011 VERMEG - Confidential and Proprietary Information*/
/**********************************************************/
package com.vermeg.services.quantity;

import com.palmyra.arch.basicStruct.data.DoubleValue;
import com.palmyra.arch.basicStruct.data.QuantityValue;
﻿import java.util ;
import com.palmyra.arch.basicStruct.data.UserDoubleValue;
import com.palmyra.arch.basicStruct.exception.KeyNotFoundException;
import com.palmyra.arch.basicStruct.exception.ValueNotFoundException;
import com.palmyra.arch.exception.ProcessException;
import com.palmyra.arch.exception.ServiceException;
import com.vermeg.services.comRefInterface.commonEnum.QuantityType;
import com.vermeg.services.quantity.res.QuantityConstants;
import com.vermeg.services.quantity.res.QuantityException;
import com.vermeg.services.spcTypes.QuantityValue9;

/**
 * this manager is used to: - unify the quantity representation in the movements
 * level - configure the internal representation of the quantity - stock the
 * client information - convert the quantity type according to an internal
 * configuration
 * 
 * <p>
 * Title:
 * </p>
 * <p>
 * Description:
 * </p>
 * <p>
 * Copyright: Copyright (c) 2006
 * </p>
 * <p>
 * Company:
 * </p>
 * 
 * @author Ruba Kharrubi
 * @version 1.0
 */
public class QuantityManagerImpl extends AbstractQuantityManager {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6705186215839525159L;

	/**
	 * This method allows to get the internal quantity type from the
	 * QuantityConfigSLA
	 * 
	 * @param incomingQuantityType
	 *            QuantityType
	 * @param custodianPath
	 *            StringValue
	 * @param tradableAssetPath
	 *            StringValue
	 * @param assetNaturePath
	 *            StringValue
	 * @return QuantityType
	 */
	public QuantityType getInternalQuantityType(
			final QuantityType incomingQuantityType,
			final String custodianPath,
			final String tradableAssetPath,
			final String assetNaturePath,
			final HasTypedQuantites hasTypedQuantites) {
		try {
			final String custodianCode = getCustodianCode(custodianPath,
					hasTypedQuantites);
			final String assetNature = (assetNaturePath == null) ? null
					: ((String) hasTypedQuantites.get(assetNaturePath
));
			final QuantityMarketExpressionConfig quantityConfigSLA = (QuantityMarketExpressionConfig) QuantityMarketExpressionConfigUtilityCaller
					.getSla(custodianCode, assetNature);
			if (quantityConfigSLA == null) {
				// hbenabdallah 04/10/2016
				// return incomingQuantityType;
				return getTradableAssetQuantityType(tradableAssetPath,
						hasTypedQuantites);
			}
			return quantityConfigSLA.getInternalQuantityType();
		} catch (ServiceException e) {
			throw new ProcessException(e);
		}
	}

	/**
	 * This method returns the custodian$code if exists else throws a
	 * QuantityException.
	 * 
	 * @param tradableAssetPath
	 *            StringValue
	 * @param hasTypedQuantites
	 *            HasTypedQuantites
	 * @throws ValueNotFoundException
	 * @throws KeyNotFoundException
	 * @throws QuantityException
	 * @return QuantityType
	 */
	private QuantityType getTradableAssetQuantityType(
			final String tradableAssetPath,
			final HasTypedQuantites hasTypedQuantites) {

		if (tradableAssetPath != null) {
			return (QuantityType) hasTypedQuantites.get(tradableAssetPath
 + QuantityConstants.QUANTITY_TYPE);
		}
		return null;
	}

	/**
	 * This method returns the quantityType if exists else throws a
	 * QuantityException.
	 * 
	 * @param custodianPath
	 *            StringValue
	 * @param hasTypedQuantites
	 *            HasTypedQuantites
	 * @throws ValueNotFoundException
	 * @throws KeyNotFoundException
	 * @throws QuantityException
	 * @return StringValue
	 */
	private String getCustodianCode(final String custodianPath,
			final HasTypedQuantites hasTypedQuantites) {

		if (custodianPath != null) {
			return (String) hasTypedQuantites.get(custodianPath
					+ QuantityConstants.CODE);
		}
		return null;
	}

	/**
	 * This method calculates the internal quantity : -If nominal doesn't exist
	 * then QuantityException is thrown -If (externalQuantityType==UNIT and the
	 * internalQuantityType==FAMT) then internalQuantity==externalQuantity *
	 * nominal -If (externalQuantityType==FAMT and the
	 * internalQuantityType==UNIT) then internalQuantity==externalQuantity /
	 * nominal
	 * 
	 * @param incomingQuantity
	 *            QuantityValue9
	 * @param incomingQuantityType
	 *            QuantityType
	 * @param internalQuantityType
	 *            QuantityType
	 * @param nominalPath
	 *            StringValue
	 * @return QuantityValue9
	 */
	public QuantityValue9 calculateInternalQuantity(
			final QuantityValue9 incomingQuantity,
			final QuantityType incomingQuantityType,
			final QuantityType internalQuantityType,
			final String nominalPath) {
		if (internalQuantityType == null || incomingQuantity == null
				|| incomingQuantityType == null) {
			return null;
		}
		if (incomingQuantityType.getValue().equals(
				internalQuantityType.getValue())) {
			return new QuantityValue9(incomingQuantity.doubleValue());
		}
		final DoubleValue nominal = getNominal(incomingQuantity, nominalPath);
		if (nominal != null) {
			if (incomingQuantityType.getValue().equals(QuantityType.UNIT)
					&& internalQuantityType.getValue()
							.equals(QuantityType.FAMT)) {
				return new QuantityValue9(incomingQuantity.doubleValue()
						* nominal.doubleValue());
			}
			if (incomingQuantityType.getValue().equals(QuantityType.FAMT)
					&& internalQuantityType.getValue()
							.equals(QuantityType.UNIT)) {
				return new QuantityValue9(incomingQuantity.doubleValue()
						/ nominal.doubleValue());
			}
		}
		return null;
	}

	/**
	 * This method returns the nominal if exists else throws a
	 * QuantityException.
	 * 
	 * @param incomingQuantity
	 *            QuantityValue9
	 * @param nominalPath
	 *            StringValue
	 * @throws ValueNotFoundException
	 * @throws KeyNotFoundException
	 * @throws QuantityException
	 * @return double
	 */
	private DoubleValue getNominal(final QuantityValue9 incomingQuantity,
			final String nominalPath) {

		if (nominalPath != null && incomingQuantity != null) {
			final HasTypedQuantites hasTypedQuantites = (HasTypedQuantites) incomingQuantity
					.getParent();
			return (DoubleValue) hasTypedQuantites.get(nominalPath);
		}
		return null;

	}

	/**
	 * This method returns the incoming quantity according to the incoming
	 * quantity type and internal quantity type
	 * 
	 * @param clientSecAccount
	 *            StringValue
	 * @param client
	 *            StringValue
	 * @param group
	 *            StringValue
	 * @param custodian
	 *            StringValue
	 * @param tradableAsset
	 *            StringValue
	 * @param assetNature
	 *            StringValue
	 * @param internalQuantity
	 *            QuantityValue
	 * @param currentFaceValue
	 *            UserDoubleValue
	 * @return Quantity
	 */
	public QuantityValue9 getIncomingQuantity(String clientSecAccount,
			String client, String group, String custodian,
			String assetNature, String tradableAsset,
			QuantityValue internalQuantity, UserDoubleValue currentFaceValue)
			throws ServiceException {
		if (internalQuantity != null) {
			QuantityType incomingQtType = getIncomingQuantityType(
					clientSecAccount, client, group, custodian, assetNature,
					tradableAsset);
			QuantityMarketExpressionConfig quantityConfigSLA = (QuantityMarketExpressionConfig) QuantityMarketExpressionConfigUtilityCaller
					.getSla(custodian, assetNature);
			QuantityType internalQtType = quantityConfigSLA != null ? quantityConfigSLA
					.getInternalQuantityType() : null;
			if (incomingQtType != null && internalQtType != null
					&& internalQtType.getValue().equals(QuantityType.FAMT)
					&& incomingQtType.getValue().equals(QuantityType.UNIT)) {
				return new QuantityValue9(internalQuantity.doubleValue()
